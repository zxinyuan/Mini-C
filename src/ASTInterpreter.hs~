module ASTInterpreter where

import Prelude hiding (lookup)
import Data.Map(Map, lookup, insert, empty, fromList)
import Ast
import StatefulUnsafeMonad


type State = Map String Val


data Val = I Integer | S Stmt | F ([String], Val) | P Integer


eval :: Program -> [String]
eval p = getPrints $ snd $ app (eval' p) undefined


getPrints :: State -> [String]
getPrints = undefined


eval' :: Program -> StatefulUnsafe State Integer
eval' [] = err "not a program"
eval' [x] = evalStep x
eval' (x:xs) = do evalStep x
                  eval' xs


evalStep :: Stmt -> StatefulUnsafe State Integer
evalStep (Assign s e) = do e' <- evalExpr e
                           withVal s (I e') (evalStep Break)
evalStep (Def n a s) = withVal n (F (a, (S s))) (evalStep s)
evalStep (Block s) = eval' s
evalStep Break = return 0
evalStep (Print s) = do v <- (evalExpr (Var s))
                        withVal s (P v) (evalStep Break)
evalStep (Return e) = evalExpr e
evalStep (While b s) = do b' <- evalBExpr b
                          if b' then
                            do evalStep s
                               evalStep (While b s)
                          else
                            evalStep Break
evalStep (If b s) = do b' <- evalBExpr b
                       if b' then
                         evalStep s
                       else
                         evalStep Break
evalStep (IfElse b t e) = do b' <- evalBExpr b
                             if b' then
                               evalStep t
                             else
                               evalStep e


-- find a val in the environment
valOf :: String -> StatefulUnsafe State Val
valOf var = StatefulUnsafe (\s -> case (Data.Map.lookup var s) of
                                    (Just x) -> (Ok x, s)
                                    Nothing -> ((Error "cannot divide by zero"), s))


-- add a val into the environment
withVal :: String -> Val -> StatefulUnsafe State a -> StatefulUnsafe State a
withVal var i comp = case comp of (StatefulUnsafe eu) -> StatefulUnsafe (\e -> eu (Data.Map.insert var i e))


-- helper functions for eval
evalExpr :: Expr -> StatefulUnsafe State Integer
evalExpr (ValInt i)  = return i
evalExpr (Var s)  = do (I s') <- valOf s
                       return s'
evalExpr (Call s e)  = do e' <- evalExpr e
                          (F ([a], S s)) <- valOf s
                          withVal a (I e') (evalStep s)
evalExpr (Plus l r)  = do l' <- evalExpr l
                          r' <- evalExpr r
                          return (l' + r')
evalExpr (Minus l r)  = do l' <- evalExpr l
                           r' <- evalExpr r
                           return (l' - r')
evalExpr (Mult l r)  = do l' <- evalExpr l
                          r' <- evalExpr r
                          return (l' * r')
evalExpr (Div l r)  = do l' <- evalExpr l
                         r' <- evalExpr r
                         return (l' `div` r')
evalExpr (Mod l r)  = do l' <- evalExpr l
                         r' <- evalExpr r
                         return (l' `mod` r')
evalExpr (Uminus e)  = do e' <- evalExpr e
                          return (-e')


evalBExpr :: BExpr -> StatefulUnsafe State Bool
evalBExpr (Or l r) = do l' <- evalBExpr l
                        r' <- evalBExpr r
                        return (l' || r')
evalBExpr (And l r) = do l' <- evalBExpr l
                         r' <- evalBExpr r
                         return (l' && r')
evalBExpr (Not b) = do b' <- evalBExpr b
                       return (not b')
evalBExpr (Eq l r) = do l' <- evalExpr l
                        r' <- evalExpr r
                        return (l' == r')
evalBExpr (Ne l r) = do l' <- evalExpr l
                        r' <- evalExpr r
                        return (l' /= r')
evalBExpr (Lt l r) = do l' <- evalExpr l
                        r' <- evalExpr r
                        return (l' < r')
evalBExpr (Gt l r) = do l' <- evalExpr l
                        r' <- evalExpr r
                        return (l' > r')
evalBExpr (Le l r) = do l' <- evalExpr l
                        r' <- evalExpr r
                        return (l' <= r')
evalBExpr (Ge l r) = do l' <- evalExpr l
                        r' <- evalExpr r
                        return (l' >= r')
